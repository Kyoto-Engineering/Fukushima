/* initialize */var Mac = (navigator.appVersion.indexOf('Mac',0) != -1);var Win = (navigator.appVersion.indexOf('Win',0) != -1);var IE  = (getBrouwserName() == 'Explorer');var NN  = (getBrouwserName() == 'Netscape');var Moz = (navigator.userAgent.indexOf("Gecko") != -1);var VER = parseInt(navigator.appVersion);var ver = navigator.appVersion;var Vmajor = parseInt(navigator.appVersion);	// ex. 3var Vminor = parseFloat(navigator.appVersion);	// ex. 3.01var MacIE5 = ((Mac && navigator.appVersion.indexOf('MSIE 5',0) != -1) || (Mac && IE && VER > 4));var MacIE4 = ((Mac && navigator.appVersion.indexOf('MSIE 4.',0) != -1));var MacIE3 = ((Mac && navigator.appVersion.indexOf('MSIE 3.',0) != -1));var MIE4 = (Mac && IE && VER == 4);var WinIE = (Win && IE);var IE6 = (ver.indexOf("MSIE 6")>-1);var IE55 = (ver.indexOf("MSIE 5.5")>-1);var IE5 = (ver.indexOf("MSIE 5")>-1);var IE56 = (IE6||IE55||IE5);var NN40 = (NN && navigator.appVersion.indexOf('4.0',0) != -1);function getBrouwserName() {	var ap = navigator.appName;	var ua = navigator.userAgent;	if (ap.indexOf("Microsoft Internet Explorer",0) != -1) return "Explorer";	if (ap.indexOf("Netscape",0) != -1) return "Netscape";	return "";}// function writeLastUpdate(strHead)// ファイル更新日を yyyy/mm/dd の形で出力する。// 引数： strHead: ファイル更新日の前に出力する文字列// 返値： 無し//// 2003/06/18 IE以外でうまく表示出来ていなかったので修正// でもこれでも完全ではないらしい//function writeLastUpdate(strHead){	var updateDate;	var yy,mm,dd;	updateDate = new Date(document.lastModified);	yy = updateDate.getYear();	mm = updateDate.getMonth() + 1;	dd = updateDate.getDate();	if (yy < 2000) { yy += 1900; }	if (mm < 10) { mm = "0" + mm; }	if (dd < 10) { dd = "0" + dd; }	document.write(strHead);	document.write(yy + "/" + mm + "/" + dd);	document.write('<br>');}// 古// function writeLastUpdate1(strHead){  var d2;  d2 = document.lastModified.split(" ")[0].split("/");//  document.write('Last update: ');  document.write(strHead);  document.write(d2[2] + "/" + d2[0] + "/" + d2[1]);  document.write('<br>');}// function writeLastUpdateRare(strHead)// ファイル更新日を ブラウザから返されたそのままで返す。// 引数： strHead: ファイル更新日の前に出力する文字列// 返値： 無しfunction writeLastUpdateRare(strHead){  document.write(strHead);  document.write(document.lastModified);  document.write('<br>');}var cacheImages = new Array(); //cache用の配列// function cacheImage(ImageSrc1,ImageSrc2....)// strImageNameの画像を変更する// 引数： strImageName: <IMG>に付けられた名前//        ImageSrc1,ImageSrc2.... 画像ファイル// 返値： 無し//// 制限： 画像ファイルのピクセル解像度は揃えないと悲しい結果になるかも//function cacheImage(){	var lngC;	for (lngC = 0; lngC < arguments.length; lngC++) {		cacheImages[cacheImages.length] = new Image();	/* ↑で一個増えるので ↓ ではマイナス１する必要がある。 */		cacheImages[cacheImages.length - 1].src = arguments[lngC];	}}// function changeImage(strImageName,ImageSrc1,ImageSrc2....)// strImageNameの画像を変更する// 引数： strImageName: <IMG>に付けられた名前//        ImageSrc1,ImageSrc2.... 画像ファイル// 返値： 無し//// 制限： 画像ファイルのピクセル解像度は揃えないと悲しい結果になるかも//function changeImage(){  var lngC;  var strCode= "document." + arguments[0] + ".src";  var strCode1;  var strNowSrc = eval(strCode);  for (lngC = 1; lngC < arguments.length; lngC++) {    if (strNowSrc.indexOf(arguments[lngC]) > 1){      if (lngC == (arguments.length - 1)) {        lngC = 0;      }      strCode1= strCode +" = \"" + arguments[lngC +1] + "\"";      eval(strCode1);      break;    }  }}/* window.scroll */var pageScrollTimer; // pageScroll()用のグローバル変数// function pageScroll(toX,toY,frms)// ページを(toX,toY)までなめらかにスクロールさせる。// 引数： toX  スクロール先のX座標//        toY  スクロール先のY座標//        frms 距離を何分の1づつ縮めるか(この数字が少ないほど一気に動きます。)// 返値： 無し//// 2003/06/18 toX、toYの設定などによってscroll動作が終わらない場合があったので修正//function pageScroll(toX,toY,frms) {	/* 現在の位置の保存と変数の初期化 */	var tmpX = 0 + getScrollLeft();	var tmpY = 0 + getScrollTop();	var cuX = tmpX;	var cuY = tmpY;	/* もしタイマーが有効になっていたら無効にする */	if (pageScrollTimer) clearTimeout(pageScrollTimer);	/* 移動先が指定されていなかったり変だったら0にする */	if (!toX || toX < 0 ) {toX = 0;}  	if (!toY || toY < 0 ) {toY = 0;}	/* 移動量が指定されていなければ6に */	if (!frms) frms = 6;  /* 移動量の計算 */	cuX += (toX - getScrollLeft()) / frms;	if (cuX < 0) cuX = 0;	cuY += (toY - getScrollTop()) / frms;	if (cuY < 0) cuY = 0;  /* 移動先の計算 */	var posX = Math.floor(cuX);	var posY = Math.floor(cuY);	/*	 もし計算結果が移動していなかったら移動先を	 目的座標にこれやっとこないと、終わらない事	 * があり。	 */	if (posX == tmpX) posX = toX;	if (posY == tmpY) posX = toY;	/* ようやくここで移動 */	window.scrollTo(posX, posY);	/*	 移動出来ていなかった場合には、現在の座標を	 移動先に。これやっとかないと終わらない事があり。	 */	if (posX != getScrollLeft()) toX = getScrollLeft();	if (posY != getScrollTop()) toY = getScrollTop();	/* 移動先に到着していなかったらタイマーで自分を呼び出す。 */	if (posX != toX || posY != toY) {		pageScrollTimer = setTimeout("pageScroll("+toX+","+toY+","+frms+")",16);	}}// function jumpToPageTop()// ページを一番左上までなめらかにスクロールさせる。// 引数： 無し// 返値： 無し//// 実処理はpageScroll()です。//function jumpToPageTop() {	if (!MacIE3 && !MacIE4 && !NN && window.scrollTo || NN && (Vminor >= 4.75) && window.scrollTo) {		pageScroll(0,0,6);	}else{		location.hash="top";	}}// function jumpToPageTopX()// ページを一番左までなめらかにスクロールさせる。// Y軸方向には動きません。(ただし、ブラウザによっては一番上まで動く可能性があります。)// 引数： 無し// 返値： 無し//function jumpToPageTopX() {	if (!MacIE3 && !MacIE4 && !NN && window.scrollTo || NN && (Vminor >= 4.75) && window.scrollTo) {		pageScroll(0,getScrollTop(),6);	}else{		location.hash = "top";	}}// function jumpToPageTopY()// ページを一番上までなめらかにスクロールさせる。// X軸方向には動きません。(ただし、ブラウザによっては一番左まで動く可能性があります。)// 引数： 無し// 返値： 無し//function jumpToPageTopY() {	if (!MacIE3 && !MacIE4 && !NN && window.scrollTo || NN && (Vminor >= 4.75) && window.scrollTo) {		pageScroll(getScrollLeft(),0,6);	}else{		location.hash="top";	}}// function getScrollLeft()// 現在X軸方向にどれだけスクロールしているか返します。// 引数： 無し// 返値： 現在のX軸方向のスクロール量//function getScrollLeft() {	if ((navigator.appName.indexOf("Microsoft Internet Explorer",0) != -1)) {		return document.body.scrollLeft;	}else if(window.pageXOffset) {		return window.pageXOffset;	}else{		return 0;	}}// function getScrollTop()// 現在Y軸方向にどれだけスクロールしているか返します。// 引数： 無し// 返値： 現在のY軸方向のスクロール量//function getScrollTop() { // 020225 if ((navigator.appName.indexOf("Microsoft Internet Explorer",0) != -1)) {  return document.body.scrollTop; } else if (window.pageYOffset) {  return window.pageYOffset; } else {  return 0; }}function getScrollWidth() { // 010317 if ((navigator.appName.indexOf("Microsoft Internet Explorer",0) != -1)) {  return document.body.scrollWidth; } else if (window.innerWidth) {  return window.innerWidth; } return 0;}function getScrollHeight() { // 010317 if ((navigator.appName.indexOf("Microsoft Internet Explorer",0) != -1)) {  return document.body.scrollHeight; } else if (window.innerHeight) {  return window.innerHeight; } return 0;}